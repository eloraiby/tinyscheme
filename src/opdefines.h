    _OP_DEF(op_eval, "force",                          1,  1,       TST_ANY,                         OP_FORCE            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_VALUEPRINT       )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_EVAL             )
#if USE_TRACING
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_REAL_EVAL        )
#endif
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_E0ARGS           )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_E1ARGS           )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_APPLY            )
#if USE_TRACING
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_REAL_APPLY       )
    _OP_DEF(op_eval, "tracing",                        1,  1,       TST_NATURAL,                     OP_TRACING          )
#endif
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_DOMACRO          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LAMBDA           )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LAMBDA1          )
    _OP_DEF(op_eval, "make-closure",                   1,  2,       TST_PAIR TST_ENVIRONMENT,        OP_MKCLOSURE        )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_QUOTE            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_DEF0             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_DEF1             )
    _OP_DEF(op_eval, "defined?",                       1,  2,       TST_SYMBOL TST_ENVIRONMENT,      OP_DEFP             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_BEGIN            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_IF0              )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_IF1              )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_SET0             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_SET1             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET0             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET1             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET2             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET0AST          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET1AST          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET2AST          )

    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET0REC          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET1REC          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_LET2REC          )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_COND0            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_COND1            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_DELAY            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_AND0             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_AND1             )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_OR0              )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_OR1              )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_C0STREAM         )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_C1STREAM         )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_MACRO0           )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_MACRO1           )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_CASE0            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_CASE1            )
    _OP_DEF(op_eval, 0,                                0,  0,       0,                               OP_CASE2            )
    _OP_DEF(op_eval, "eval",                           1,  2,       TST_ANY TST_ENVIRONMENT,         OP_PEVAL            )
    _OP_DEF(op_eval, "apply",                          1,  INF_ARG, TST_NONE,                        OP_PAPPLY           )
    _OP_DEF(op_eval, "call-with-current-continuation", 1,  1,       TST_NONE,                        OP_CONTINUATION     )
    _OP_DEF(op_eval, "length",                         1,  1,       TST_LIST,                        OP_LIST_LENGTH      )
    _OP_DEF(op_eval, "assq",                           2,  2,       TST_NONE,                        OP_ASSQ             )
    _OP_DEF(op_eval, "get-closure-code",               1,  1,       TST_NONE,                        OP_GET_CLOSURE      )

#if USE_MATH
    _OP_DEF(op_number, "inexact->exact",               1,  1,       TST_NUMBER,                      OP_INEX2EX          )
    _OP_DEF(op_number, "exp",                          1,  1,       TST_NUMBER,                      OP_EXP              )
    _OP_DEF(op_number, "log",                          1,  1,       TST_NUMBER,                      OP_LOG              )
    _OP_DEF(op_number, "sin",                          1,  1,       TST_NUMBER,                      OP_SIN              )
    _OP_DEF(op_number, "cos",                          1,  1,       TST_NUMBER,                      OP_COS              )
    _OP_DEF(op_number, "tan",                          1,  1,       TST_NUMBER,                      OP_TAN              )
    _OP_DEF(op_number, "asin",                         1,  1,       TST_NUMBER,                      OP_ASIN             )
    _OP_DEF(op_number, "acos",                         1,  1,       TST_NUMBER,                      OP_ACOS             )
    _OP_DEF(op_number, "atan",                         1,  2,       TST_NUMBER,                      OP_ATAN             )
    _OP_DEF(op_number, "sqrt",                         1,  1,       TST_NUMBER,                      OP_SQRT             )
    _OP_DEF(op_number, "expt",                         2,  2,       TST_NUMBER,                      OP_EXPT             )
    _OP_DEF(op_number, "floor",                        1,  1,       TST_NUMBER,                      OP_FLOOR            )
    _OP_DEF(op_number, "ceiling",                      1,  1,       TST_NUMBER,                      OP_CEILING          )
    _OP_DEF(op_number, "truncate",                     1,  1,       TST_NUMBER,                      OP_TRUNCATE         )
    _OP_DEF(op_number, "round",                        1,  1,       TST_NUMBER,                      OP_ROUND            )
#endif
    _OP_DEF(op_number, "+",                            0,  INF_ARG, TST_NUMBER,                      OP_ADD              )
    _OP_DEF(op_number, "-",                            1,  INF_ARG, TST_NUMBER,                      OP_SUB              )
    _OP_DEF(op_number, "*",                            0,  INF_ARG, TST_NUMBER,                      OP_MUL              )
    _OP_DEF(op_number, "/",                            1,  INF_ARG, TST_NUMBER,                      OP_DIV              )
    _OP_DEF(op_number, "quotient",                     1,  INF_ARG, TST_INTEGER,                     OP_INTDIV           )
    _OP_DEF(op_number, "remainder",                    2,  2,       TST_INTEGER,                     OP_REM              )
    _OP_DEF(op_number, "modulo",                       2,  2,       TST_INTEGER,                     OP_MOD              )

    _OP_DEF(op_atom, "car",                            1,  1,       TST_PAIR,                        OP_CAR              )
    _OP_DEF(op_atom, "cdr",                            1,  1,       TST_PAIR,                        OP_CDR              )
    _OP_DEF(op_atom, "cons",                           2,  2,       TST_NONE,                        OP_CONS             )
    _OP_DEF(op_atom, "set-car!",                       2,  2,       TST_PAIR TST_ANY,                OP_SETCAR           )
    _OP_DEF(op_atom, "set-cdr!",                       2,  2,       TST_PAIR TST_ANY,                OP_SETCDR           )
    _OP_DEF(op_atom, "char->integer",                  1,  1,       TST_CHAR,                        OP_CHAR2INT         )
    _OP_DEF(op_atom, "integer->char",                  1,  1,       TST_NATURAL,                     OP_INT2CHAR         )
    _OP_DEF(op_atom, "char-upcase",                    1,  1,       TST_CHAR,                        OP_CHARUPCASE       )
    _OP_DEF(op_atom, "char-downcase",                  1,  1,       TST_CHAR,                        OP_CHARDNCASE       )
    _OP_DEF(op_atom, "symbol->string",                 1,  1,       TST_SYMBOL,                      OP_SYM2STR          )
    _OP_DEF(op_atom, "atom->string",                   1,  2,       TST_ANY TST_NATURAL,             OP_ATOM2STR         )
    _OP_DEF(op_atom, "string->symbol",                 1,  1,       TST_STRING,                      OP_STR2SYM          )
    _OP_DEF(op_atom, "string->atom",                   1,  2,       TST_STRING TST_NATURAL,          OP_STR2ATOM         )
    _OP_DEF(op_atom, "make-string",                    1,  2,       TST_NATURAL TST_CHAR,            OP_MKSTRING         )
    _OP_DEF(op_atom, "string-length",                  1,  1,       TST_STRING,                      OP_STRLEN           )
    _OP_DEF(op_atom, "string-ref",                     2,  2,       TST_STRING TST_NATURAL,          OP_STRREF           )
    _OP_DEF(op_atom, "string-set!",                    3,  3,       TST_STRING TST_NATURAL TST_CHAR, OP_STRSET           )
    _OP_DEF(op_atom, "string-append",                  0,  INF_ARG, TST_STRING,                      OP_STRAPPEND        )
    _OP_DEF(op_atom, "substring",                      2,  3,       TST_STRING TST_NATURAL,          OP_SUBSTR           )
    _OP_DEF(op_atom, "vector",                         0,  INF_ARG, TST_NONE,                        OP_VECTOR           )
    _OP_DEF(op_atom, "make-vector",                    1,  2,       TST_NATURAL TST_ANY,             OP_MKVECTOR         )
    _OP_DEF(op_atom, "vector-length",                  1,  1,       TST_VECTOR,                      OP_VECLEN           )
    _OP_DEF(op_atom, "vector-ref",                     2,  2,       TST_VECTOR TST_NATURAL,          OP_VECREF           )
    _OP_DEF(op_atom, "vector-set!",                    3,  3,       TST_VECTOR TST_NATURAL TST_ANY,  OP_VECSET           )

    _OP_DEF(op_predicate, "not",                       1,  1,       TST_NONE,                        OP_NOT              )
    _OP_DEF(op_predicate, "boolean?",                  1,  1,       TST_NONE,                        OP_BOOLP            )
    _OP_DEF(op_predicate, "eof-object?",               1,  1,       TST_NONE,                        OP_EOFOBJP          )
    _OP_DEF(op_predicate, "null?",                     1,  1,       TST_NONE,                        OP_NULLP            )
    _OP_DEF(op_predicate, "symbol?",                   1,  1,       TST_ANY,                         OP_SYMBOLP          )
    _OP_DEF(op_predicate, "number?",                   1,  1,       TST_ANY,                         OP_NUMBERP          )
    _OP_DEF(op_predicate, "string?",                   1,  1,       TST_ANY,                         OP_STRINGP          )
    _OP_DEF(op_predicate, "integer?",                  1,  1,       TST_ANY,                         OP_INTEGERP         )
    _OP_DEF(op_predicate, "real?",                     1,  1,       TST_ANY,                         OP_REALP            )
    _OP_DEF(op_predicate, "char?",                     1,  1,       TST_ANY,                         OP_CHARP            )
    _OP_DEF(op_predicate, "=",                         2,  INF_ARG, TST_NUMBER,                      OP_NUMEQ            )
    _OP_DEF(op_predicate, "<",                         2,  INF_ARG, TST_NUMBER,                      OP_LESS             )
    _OP_DEF(op_predicate, ">",                         2,  INF_ARG, TST_NUMBER,                      OP_GRE              )
    _OP_DEF(op_predicate, "<=",                        2,  INF_ARG, TST_NUMBER,                      OP_LEQ              )
    _OP_DEF(op_predicate, ">=",                        2,  INF_ARG, TST_NUMBER,                      OP_GEQ              )
#if USE_CHAR_CLASSIFIERS
    _OP_DEF(op_predicate, "char-alphabetic?",          1,  1,       TST_CHAR,                        OP_CHARAP           )
    _OP_DEF(op_predicate, "char-numeric?",             1,  1,       TST_CHAR,                        OP_CHARNP           )
    _OP_DEF(op_predicate, "char-whitespace?",          1,  1,       TST_CHAR,                        OP_CHARWP           )
    _OP_DEF(op_predicate, "char-upper-case?",          1,  1,       TST_CHAR,                        OP_CHARUP           )
    _OP_DEF(op_predicate, "char-lower-case?",          1,  1,       TST_CHAR,                        OP_CHARLP           )
#endif
    _OP_DEF(op_predicate, "port?",                     1,  1,       TST_ANY,                         OP_PORTP            )
    _OP_DEF(op_predicate, "input-port?",               1,  1,       TST_ANY,                         OP_INPORTP          )
    _OP_DEF(op_predicate, "output-port?",              1,  1,       TST_ANY,                         OP_OUTPORTP         )
    _OP_DEF(op_predicate, "procedure?",                1,  1,       TST_ANY,                         OP_PROCP            )
    _OP_DEF(op_predicate, "pair?",                     1,  1,       TST_ANY,                         OP_PAIRP            )
    _OP_DEF(op_predicate, "list?",                     1,  1,       TST_ANY,                         OP_LISTP            )
    _OP_DEF(op_predicate, "environment?",              1,  1,       TST_ANY,                         OP_ENVP             )
    _OP_DEF(op_predicate, "vector?",                   1,  1,       TST_ANY,                         OP_VECTORP          )
    _OP_DEF(op_predicate, "eq?",                       2,  2,       TST_ANY,                         OP_EQ               )
    _OP_DEF(op_predicate, "eqv?",                      2,  2,       TST_ANY,                         OP_EQV              )
    _OP_DEF(op_predicate, "closure?",                  1,  1,       TST_NONE,                        OP_CLOSUREP         )
    _OP_DEF(op_predicate, "macro?",                    1,  1,       TST_NONE,                        OP_MACROP           )

    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDSEXPR          )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDLIST           )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDDOT            )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDQUOTE          )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDQQUOTE         )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDQQUOTEVEC      )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDUNQUOTE        )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDUQTSP          )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_RDVEC            )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_P0LIST           )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_P1LIST           )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_PVECFROM         )
    _OP_DEF(op_parse, "load",                          1,  1,       TST_STRING,                      OP_LOAD             )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_T0LVL            )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_T1LVL            )
    _OP_DEF(op_parse, 0,                               0,  0,       0,                               OP_READ_INTERNAL    )

    _OP_DEF(op_ioctl, "gensym",                         0,  0,       0,                               OP_GENSYM           )
    _OP_DEF(op_ioctl, 0,                                0,  0,       0,                               OP_SAVE_FORCED      )
    _OP_DEF(op_ioctl, "error",                          1,  INF_ARG, TST_NONE,                        OP_ERR0             )
    _OP_DEF(op_ioctl, 0,                                0,  0,       0,                               OP_ERR1             )
    _OP_DEF(op_ioctl, "reverse",                        1,  1,       TST_LIST,                        OP_REVERSE          )
    _OP_DEF(op_ioctl, "list*",                          1,  INF_ARG, TST_NONE,                        OP_LIST_STAR        )
    _OP_DEF(op_ioctl, "append",                         0,  INF_ARG, TST_NONE,                        OP_APPEND           )
#if USE_PLIST
    _OP_DEF(op_ioctl, "put",                            3,  3,       TST_NONE,                        OP_PUT              )
    _OP_DEF(op_ioctl, "get",                            2,  2,       TST_NONE,                        OP_GET              )
#endif
    _OP_DEF(op_ioctl, "quit",                           0,  1,       TST_NUMBER,                      OP_QUIT             )
    _OP_DEF(op_ioctl, "gc",                             0,  0,       0,                               OP_GC               )
    _OP_DEF(op_ioctl, "gc-verbose",                     0,  1,       TST_NONE,                        OP_GCVERB           )
    _OP_DEF(op_ioctl, "oblist",                         0,  0,       0,                               OP_OBLIST           )
    _OP_DEF(op_ioctl, "interaction-environment",        0,  0,       0,                               OP_INT_ENV          )
    _OP_DEF(op_ioctl, "current-environment",            0,  0,       0,                               OP_CURR_ENV         )
#undef _OP_DEF
